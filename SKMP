import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;

import com.sun.tools.sjavac.server.SysInfo;

public class SKMP {

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while (t > 0) {
			String s = sc.next();
			String p = sc.next();
			smallestKMP(s, p);
			t--;
		}
	}

	public static void smallestKMP(String s, String p) {
		int[] arr = new int[26];
		for (int i = 0; i < s.length(); i++) {
			arr[s.charAt(i) - 97]++;
		}

		for (int i = 0; i < p.length(); i++) {
			arr[p.charAt(i) - 97]--;
		}

		String s1 = p;
		String s2 = p;
		String front = "";
		String back = "";

		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > 0) {
				char[] charArray = new char[arr[i]];
				Arrays.fill(charArray, (char) (i + 97));
				String temp = String.valueOf(charArray);
				s1 = front + temp + s1 + back;
				s2 = front + s2 + temp + back;
				int val = s1.compareTo(s2);
				if (val >= 0) {
					back += temp;
				} else {
					front += temp;
				}
				s1 = p;
				s2 = p;
			}
		}

		String result = front + p + back;
		System.out.println(result);
	}

	public static void KMPSearch(String s, String p) {
		int[] arr = new int[26];
		for (int i = 0; i < s.length(); i++) {
			arr[s.charAt(i) - 97]++;
		}

		for (int i = 0; i < p.length(); i++) {
			arr[p.charAt(i) - 97]--;
		}

		String finalString = "";
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i]; j++) {
				finalString += (char) (i + 97);
			}
		}

		char ch = p.charAt(0);
		int bigindex = 0;
		int equalindex = 0;
		boolean isbig = false;
		boolean issmall = false;
		boolean isequal = false;
		for (int i = 0; i < finalString.length(); i++) {
			char tocheck = finalString.charAt(i);
			if (ch < tocheck && !isbig) {
				bigindex = i;
				isbig = true;
			} else if (ch == tocheck && !isequal) {
				equalindex = i;
				isequal = true;
			}
		}

		String ans = "";

		if (isbig) {
			ans += finalString.substring(0, bigindex) + p + finalString.substring(bigindex);
		} else if (!isbig && isequal) {
			String a1 = finalString.substring(0, equalindex) + p + finalString.substring(equalindex);
			String a2 = finalString.substring(0, equalindex + 1) + p + finalString.substring(equalindex + 1);
			ans = a1.compareTo(a2) >= 0 ? a2 : a1;
		}
		System.out.println(ans);
	}
}
